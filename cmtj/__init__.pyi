from typing import List

from typing import overload
xaxis: Any
yaxis: Any
zaxis: Any

def c_dot(arg0, arg1) -> float: ...

class AxialDriver:
    @overload
    def __init__(self, arg0: ScalarDriver, arg1: ScalarDriver, arg2: ScalarDriver) -> None: ...
    @overload
    def __init__(self, arg0: List[ScalarDriver]) -> None: ...
    @overload
    def __init__(*args, **kwargs) -> Any: ...
    @overload
    def applyMask(self, arg0: CVector) -> None: ...
    @overload
    def applyMask(self, arg0: List[int]) -> None: ...
    @overload
    def applyMask(*args, **kwargs) -> Any: ...
    def getCurrentAxialDrivers(self, arg0: float) -> CVector: ...
    def getVectorAxialDriver(self, arg0: float, arg1: float) -> AxialDriver: ...

class Axis:
    __entries: Any = ...
    xaxis: Any = ...
    yaxis: Any = ...
    zaxis: Any = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __getstate__(self) -> int: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    def __setstate__(self, state: int) -> None: ...
    @property
    def name(self) -> Any: ...
    @property
    def __doc__(self) -> Any: ...
    @property
    def __members__(self) -> Any: ...

class CVector:
    def __init__(self, arg0: float, arg1: float, arg2: float) -> None: ...
    def length(self) -> float: ...
    @property
    def x(self) -> float: ...
    @x.setter
    def x(self, val: float) -> None: ...
    @property
    def y(self) -> float: ...
    @y.setter
    def y(self, val: float) -> None: ...
    @property
    def z(self) -> float: ...
    @z.setter
    def z(self, val: float) -> None: ...

class Junction:
    @overload
    def __init__(self, layers: List[Layer], filename: str = ...) -> None: ...
    @overload
    def __init__(self, layers: List[Layer], filename: str, Rp: float = ..., Rap: float = ...) -> None: ...
    @overload
    def __init__(self, layers: List[Layer], filename: str, Rx0: List[float], Ry0: List[float], AMR_X: List[float], AMR_Y: List[float], SMR_X: List[float], SMR_Y: List[float], AHE: List[float]) -> None: ...
    @overload
    def __init__(*args, **kwargs) -> Any: ...
    def clearLog(self) -> None: ...
    def getLayerMagnetisation(self, arg0: str) -> CVector: ...
    def getLog(self) -> Dict[str,List[float]]: ...
    def getMagnetoresistance(self) -> List[float]: ...
    def runSimulation(self, totalTime: float, timeStep: float = ..., writeFrequency: float = ..., persist: bool = ..., log: bool = ..., calculateEnergies: bool = ...) -> None: ...
    def setIECDriver(self, arg0: str, arg1: str, arg2: ScalarDriver) -> None: ...
    def setLayerAnisotropyDriver(self, arg0: str, arg1: ScalarDriver) -> None: ...
    def setLayerCurrentDriver(self, arg0: str, arg1: ScalarDriver) -> None: ...
    def setLayerExternalFieldDriver(self, arg0: str, arg1: AxialDriver) -> None: ...
    def setLayerMagnetisation(self, arg0: str, arg1: CVector) -> None: ...
    @overload
    def setLayerOerstedFieldDriver(self, arg0: str, arg1: AxialDriver) -> None: ...
    @overload
    def setLayerOerstedFieldDriver(self, arg0: str, arg1: AxialDriver) -> None: ...
    @overload
    def setLayerOerstedFieldDriver(*args, **kwargs) -> Any: ...

class Layer:
    def __init__(self, id: str, mag: CVector, anis: CVector, Ms: float, thickness: float, cellSurface: float, demagTensor: List[CVector], dipoleTensor: List[CVector], temperature: float = ..., includeSTT: bool = ..., damping: float = ..., SlonczewskiSpacerLayerParameter: float = ..., beta: float = ..., spinPolarisation: float = ..., silent: bool = ...) -> None: ...
    def setAnisotropyDriver(self, arg0: ScalarDriver) -> None: ...
    def setExternalFieldDriver(self, arg0: AxialDriver) -> None: ...
    def setMagnetisation(self, arg0: CVector) -> None: ...
    def setOerstedFieldDriver(self, arg0: AxialDriver) -> None: ...
    def setReferenceLayer(self, arg0: CVector) -> None: ...

class NullDriver(ScalarDriver):
    def __init__(self) -> None: ...

class ScalarDriver:
    def __init__(self, *args, **kwargs) -> None: ...
    def getConstantDriver(self, *args, **kwargs) -> Any: ...
    def getPulseDriver(self, *args, **kwargs) -> Any: ...
    def getSineDriver(self, *args, **kwargs) -> Any: ...
    def getStepDriver(self, *args, **kwargs) -> Any: ...
