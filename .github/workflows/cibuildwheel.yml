name: Build wheels with cibuildwheel

on:
  pull_request:
    branches: [master]
    paths:
      - '**.cpp'
      - '**.hpp'
      - '**.py'
      - 'setup.py'
      - 'setup.cfg'
      - 'pyproject.toml'
      - '**.yml'

  pull_request_target:
    types: [closed]
    branches: [master]
    paths:
      - '**.cpp'
      - '**.hpp'
      - '**.py'
      - 'setup.py'
      - 'setup.cfg'
      - 'pyproject.toml'
      
  workflow_dispatch:
    inputs:
      dry-run:
        description: 'Dry run (no actual upload to PyPI)'
        type: boolean
        default: true

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    env:
      TWINE_USERNAME: __token__
      IS_DRY_RUN: ${{ !(github.event_name == 'pull_request_target' && github.event.pull_request.merged == true) }}

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'true'

      - name: Get version
        id: get_version
        run: |
          python -m pip install setuptools-scm
          echo "version=$(python -c "import setuptools_scm; print(setuptools_scm.get_version())")" >> $GITHUB_OUTPUT

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install cibuildwheel
        run: python -m pip install cibuildwheel

      - name: Build wheels
        run: python -m cibuildwheel --output-dir wheelhouse
        env:
          # Build for Python 3.9, 3.10, 3.11, 3.12
          CIBW_BUILD: "cp39-* cp310-* cp311-* cp312-* cp313-*"
          # Skip PyPy builds and 32-bit builds
          CIBW_SKIP: "pp* *-win32 *-manylinux_i686"
          # Install build dependencies
          CIBW_BUILD_REQUIRES: "setuptools>=61.0 setuptools-scm>=8.0 pybind11>=2.6.1 wheel"
          # Test command (optional)
          CIBW_TEST_REQUIRES: "pytest pytest-xdist"
          CIBW_TEST_COMMAND: "pytest {project}/tests/ -v"
          # Use manylinux2014 for Linux builds
          CIBW_TEST_SKIP: "*-musllinux*"
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux_2_28
          CIBW_MANYLINUX_AARCH64_IMAGE: manylinux_2_28
          # Environment variables
          CIBW_ENVIRONMENT: "SETUPTOOLS_SCM_PRETEND_VERSION=${{ steps.get_version.outputs.version }}"

      - name: Install twine
        run: python -m pip install twine

      - name: Check wheels
        run: python -m twine check wheelhouse/*

      - name: Upload wheels to Test PyPI (dry run)
        if: env.IS_DRY_RUN == 'true'
        env:
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_TOKEN }}
        run: |
          python -m twine upload --repository testpypi wheelhouse/* --verbose
        continue-on-error: true

      - name: Upload wheels to PyPI (production)
        if: env.IS_DRY_RUN == 'false'
        env:
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: |
          python -m twine upload wheelhouse/*

      - name: Upload wheels as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}-${{ strategy.job-index }}
          path: wheelhouse/*.whl
          retention-days: 30

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    env:
      TWINE_USERNAME: __token__
      IS_DRY_RUN: ${{ !(github.event_name == 'pull_request_target' && github.event.pull_request.merged == true) }}

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'true'

      - name: Get version
        id: get_version
        run: |
          python -m pip install setuptools-scm
          echo "version=$(python -c "import setuptools_scm; print(setuptools_scm.get_version())")" >> $GITHUB_OUTPUT

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Build sdist
        run: |
          python -m pip install build
          python -m build --sdist

      - name: Install twine
        run: python -m pip install twine

      - name: Check sdist
        run: python -m twine check dist/*

      - name: Upload sdist to Test PyPI (dry run)
        if: env.IS_DRY_RUN == 'true'
        env:
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_TOKEN }}
        run: |
          python -m twine upload --repository testpypi dist/* --verbose
        continue-on-error: true

      - name: Upload sdist to PyPI (production)
        if: env.IS_DRY_RUN == 'false'
        env:
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: |
          python -m twine upload dist/*

      - name: Upload sdist as artifact
        uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist/*.tar.gz
          retention-days: 30

  release-build:
    name: Create GitHub Release
    needs: [build_wheels, build_sdist]
    if: (github.event_name == 'pull_request_target' && github.event.pull_request.merged == true)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Get version
        id: get_version
        run: |
          python -m pip install setuptools-scm
          echo "version=$(python -c "import setuptools_scm; print(setuptools_scm.get_version())")" >> $GITHUB_OUTPUT

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create "v${{ steps.get_version.outputs.version }}" \
              --repo="$GITHUB_REPOSITORY" \
              --title="${GITHUB_REPOSITORY#*/} ${{ steps.get_version.outputs.version }}" \
              --generate-notes \
              artifacts/*/*
